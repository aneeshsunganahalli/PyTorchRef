# -*- coding: utf-8 -*-
"""TabularClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ujNSM5x-SH89NZB2ap53N5i9q1mNq2bk
"""

!pip install opendatasets --quiet
import opendatasets as od
od.download("https://www.kaggle.com/datasets/mssmartypants/rice-type-classification")

import torch
import torch.nn as nn
from torch.optim import Adam
from torch.utils.data import Dataset, DataLoader
from torchsummary import summary
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

device = 'cuda' if torch.cuda.is_available() else 'cpu'

data_df = pd.read_csv("/content/rice-type-classification/riceClassification.csv")
data_df.dropna(inplace=True)
data_df.head()

data_df.drop(["id"], axis=1, inplace=True)
data_df.head()

print("Output possibilites: ", data_df["Class"].unique())

print(data_df["Class"].value_counts())

original_df = data_df.copy()
for column in data_df.columns:
  data_df[column] = data_df[column] / data_df[column].abs().max()

X = np.array(data_df.iloc[:, :-1])
Y = np.array(data_df.iloc[:, -1])

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3)
X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.5)

print("Training set is: ", X_train.shape[0], " rows which is ", round(X_train.shape[0]/data_df.shape[0],4)*100, "%") # Print training shape
print("Validation set is: ",X_val.shape[0], " rows which is ", round(X_val.shape[0]/data_df.shape[0],4)*100, "%") # Print validation shape
print("Testing set is: ",X_test.shape[0], " rows which is ", round(X_test.shape[0]/data_df.shape[0],4)*100, "%") # Print testing shape

